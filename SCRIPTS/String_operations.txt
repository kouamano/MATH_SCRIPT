naturalQ[x_] :=
  IntegerQ[x] && x >= 1;

listFragmentation[list_, size_, gap_, shift_:0] :=
  Table[
    Take[list, {n, n + size - 1}], {n, 1 + shift, Length[list] - size + 1, gap}];

stringFragmantation[str_String, size_, gap_, shift_:0] :=
  Table[StringTake[str, {n, n + size - 1}], {n, 1 + shift, 
      StringLength[str] - size + 1, gap}];

stringtostringlist[list_] :=
  Table[
    StringTake[list, {n, n}], {n, StringLength[list]}];

listtostringlist[list_] :=
  Table[ToString[list[[n]]], {n, Length[list]}];

dropfirstline[list_] :=
  Block[{ps},
    ps = Position[list, "\n"][[1]][[1]];
    Drop[list, ps]
    ];

dropSpace[data_String] :=
  StringReplace[data, {" " -> "", "\n" -> "", "\t" -> ""}];

deletenull[list_] :=
  Block[{ps},
    ps = Position[list, Null];
    Delete[list, ps]
    ];

countfrags[list_] :=
  Module[{un, cnt},
    un = Union[list];
    {un, Table[Count[list, un[[n]]], {n, Length[un]}]}
    ];

countfrags[base_List, patt_List] :=
  Module[{un, cnt},
    un = Union[patt];
    Table[Count[base, un[[n]]], {n, Length[un]}]
    ];

listpositiontest[source_, comp_] :=
  Module[{lc},
    lc = Length[comp];
    Table[
      Apply[And,
        Table[
          source[[n + m]] == comp[[n]], {n, lc}]], {m, 0, Length[source] - lc}]
    ];

listposition[source_, comp_] :=
  Module[{lc},
    lc = Length[comp];
    Position[
      Table[
        Apply[And,
          Table[
            source[[n + m]] == comp[[n]], {n, lc}]], {m, 0, Length[source] - lc}], True]
    ];

pureFuncTogenFunc[fname_, pfunc_] :=
  Block[{h1, h2, h3, h4, t1},
    h1 = Map[ToString, pfunc[[1]]];
    h2 = Map[StringJoin[#, "_"] &, h1];
    h3 = Map[ToExpression, h2];
    h4 = ReplacePart[h3, fname, 0];
    t1 = pfunc[[2]];
    ToExpression[StringJoin[{ToString[h4], ":=", ToString[t1]}]]
  ];

(*n-gram match*)
nGram[n_Integer, str_String] := Module[
  {strchars, re},
  re = "(?s).{" <> ToString[n] <> "}"; 
  StringCases[str, RegularExpression[re], Overlaps -> True]
];

nGram[n_Integer, str_List] := Module[
  {re},
  re = "(?s).{" <> ToString[n] <> "}";
  Flatten[
    Map[StringCases[#, RegularExpression[re], Overlaps -> True] &, str]]
];

Freq[n_Integer, str_List] := Tr[Map[StringLength[#] - n + 1 &, str]];

Freq[n_Integer, str_String] := Tr[StringLength[str] - n + 1];

Freq[e_String, n_Integer, str_List] := 
  Length[Flatten[Map[StringCases[#, e, Overlaps -> True] &, str]]];

Freq[e_String, n_Integer, str_String] := 
  Length[StringCases[str, e, Overlaps -> True]];

M[n_Integer, str_List] := Module[
  {re, depth, pre, pat},
  re = "(?s).{" <> ToString[n] <> "}";
  pre = Apply[Outer, 
    Prepend[Map[
      StringCases[#, RegularExpression[re], Overlaps -> True] &, str], List]];
  depth = ArrayDepth[pre];
  pat = Table[x_, {depth - 1}];
  pre = Flatten[pre, depth - 2];
  Length[Cases[pre, pat]]
];

M[e_String, n_Integer, str_List] := 
  Apply[Times, Map[Length[StringCases[#, e, Overlaps -> True]] &, str]];

Mpat[n_Integer, str_List] := Module[
  {re, depth, pre, pat},
  re = "(?s).{" <> ToString[n] <> "}";
  pre = Apply[Outer, 
    Prepend[Map[
      StringCases[#, RegularExpression[re], Overlaps -> True] &, str], List]];
  depth = ArrayDepth[pre];
  pat = Table[x_, {depth - 1}];
  pre = Flatten[pre, depth - 2];
  Cases[pre, pat]
];

Mpat[e_String, n_Integer, str_List] := 
  Map[StringCases[#, e, Overlaps -> True] &, str];

(*3 strings 以上のaffを求めるには、以下以外にない?*)
(* sim = (cmp(str1,str2) x cmp(str1,str3) x cmp(str2,str3))^係数/(cmp(str1,str1) x cmp(str2,str2) x cmp(str3,str3))^係数 *)
SimA[n_, str_List] := (M[n, str]^2)/
  Apply[Times, Map[M[n, {#, #}] &, str]]; (*3D以上の時不正*)

SimB[n_Integer, str_List] := Module[
  {tal, lens},
  lens = Map[StringLength[#] - n + 1 &, str];
  tal = Tally[nGram[n, str]];
  Apply[Plus, lens]*
    Tr[Map[M[#[[1]], n, str]/#[[2]] &, tal]]/Apply[Times, lens]
]; (*3D以上の時不正*)
