(*ネットワーク*)

(**MST**)
(*** mst with distance matrix ***)
shift[list_] := {list[[1]], Drop[list, 1]};
mstD[dmat_] := 
 Module[{pairdistS, seqMax, nodeClasses, head, headID, headClass, 
   minClass, maxClass, maxClassMate, out, h, n},
  seqMax = Length[dmat];
  pairdistS = 
   Select[Sort[
     Flatten[MapIndexed[{#2, #1} &, dmat, {2}], 
      1], #1[[2]] < #2[[2]] &], #[[1, 1]] != #[[1, 2]] &];
  nodeClasses = Range[seqMax];
  
  (*recursive*)
  out = Reap[
    (*Sow[{}, h];*)
    (*Sow[nodeClasses, n];*)
    While[Length[Union[nodeClasses]] != 1,
     ({head, pairdistS} = shift[pairdistS];
       headID = head[[1]];
       headClass = nodeClasses[[headID]];
       minClass = Min[headClass];
       maxClass = Max[headClass];
       maxClassMate = Flatten[Position[nodeClasses, maxClass]];
       If[Length[Union[headClass]] == 2, Sow[head, h]; 
        nodeClasses[[headID[[1]]]] = minClass; 
        nodeClasses[[headID[[2]]]] = minClass;
        nodeClasses[[maxClassMate]] = minClass;
        Sow[nodeClasses, n];];
       (*Print[pairdistS//Length,nodeClasses,head]*);)
     ];
    ];
  out[[2]]
  ];

(***距離行列からユニークなエッジとその距離を求める***)
udEdgeTake[dmat_] := 
  Sort[Union[
    Cases[Flatten[MapIndexed[{Sort[#2], #1} &, dmat, {2}], 1], 
    {{x_, y_}, _} /; x != y]], #1[[2]] < #2[[2]] &]

(***作成中のmstにエッジを与えるとクローズドパスとなるかをテスト***)
mstCycleTest[mst_] := Module[
  {(*nEdge, nNode,*) g},
  (*nEdge = Length[mst];*)
  (*nNode = Length[Union[Flatten[Map[#[[1]] &, mst]]]];*)
  g = Map[#[[1]]&, mst];
  (*If[nEdge == nNode-1, True, False]*)
  AcyclicGraphQ[Graph[g]]
]

(***作成中のmstにオープンパスとなるエッジを与える***)
mstAddTest[mstANDpoolPos_, edgePool_, size_] := Module[
  {mst, mstNew, poolPos},
  mst = mstANDpoolPos[[1]];
  poolPos = mstANDpoolPos[[2]];
  mstNew = Join[mst, {edgePool[[poolPos + 1]]}];
  If[mstCycleTest[mstNew], {mstNew, poolPos + 1}, {mst, poolPos + 1}]
]

(***NestWhile[]用の最初の引数を作成***)
mstCreateFirst[edgePool_] := {{edgePool[[1]]}, 1}

(***エッジプールのノードの個数***)
mstEdgePoolSize[edgePool_] := Max[Flatten[Map[#[[1]] &, edgePool]]]

(***エッジのリストを引数にとるMST***)
MST[edgePool_] := Module[
  {first, size, e},
  first = mstCreateFirst[edgePool];
  size = mstEdgePoolSize[edgePool];
  NestWhile[mstAddTest[#, edgePool, size] &, first, 
  Length[#[[1]]] < size - 1 &]
]

(***距離行列を引数にとるMST***)
MSTdmat[dm_] := Module[
  {edgePool, first, size, e},
  If[Length[dm] == 1,
    {{{{}, 0}}, 0},
    edgePool = udEdgeTake[dm];
    first = mstCreateFirst[edgePool];
    size = mstEdgePoolSize[edgePool];
    NestWhile[mstAddTest[#, edgePool, size] &, first, 
    Length[#[[1]]] < size - 1 &]
  ]
]

(***get max edge***)
getMaxEdge[mst_] := 
  mst[[Ordering[mst, 1, (#1[[3]] > #2[[3]]) &]]][[1]][[{1, 2}]]

(***make group from selected edge***)
makeFirstGr[edge_List, len_] := Table[edge[[1]], {len}]

(***decide group ID***)
getGroupBySortedEdge[sedge_, pos_, conj_, prev_] := 
  Module[{edge, li, len, target, disc},
  edge = sedge[[pos]][[{1, 2}]];
  li = Transpose[conj[[edge]]];
  len = Length[prev];
  target = Union[prev[[edge]]];
  disc = Map[If[#[[1]] <= #[[2]], edge[[1]], edge[[2]]] &, li];
  Table[If[prev[[n]] == target[[1]], disc[[n]], prev[[n]]], {n, len}]
]

(***整形***)
MSTreform[mst_] := Map[ Flatten[#]&, mst[[1]] ]
MSTBaseShift[mstNode_, s_] := mstNode + {s, s, 0}


(**結合距離(ステップ)行列**)
(***エッジリストから隣接行列を得る***)
adjMatFromList[l_] := Module[{max, tab},
  max = Max[Flatten[l]];
  tab = Table[0, {max}, {max}];
  Map[(tab[[#[[1]], #[[2]]]] = 1) &, l ];
  Map[(tab[[#[[2]], #[[1]]]] = 1) &, l ];
  tab
]
(***エッジリストから結合距離(ステップ)行列を得る***)
conjMatFromAdjE[l_] := Module[{tab, len, dMat, aMat, pfunc, i, pos},
  tab = adjMatFromList[l];
  len = Length[tab];
  dMat = Table[0, {len}, {len}];
  aMat = IdentityMatrix[len];
  pfunc[d_, a_] := 
    Intersection[Position[d, 0], Position[a, x_ /; x != 0]];
  For[i = 1, i <= len, i++, 
    If[Length[Position[dMat, 0]] == 0, Break[]]; aMat = aMat.tab; 
    pos = pfunc[dMat, aMat]; Map[(dMat[[#[[1]], #[[2]]]] = i) &, pos]; 
    (*Print[pos]*)
  ];
  ReplacePart[dMat, {x_, x_} -> 0]
]
