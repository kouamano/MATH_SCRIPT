(*ネットワーク*)

(*MST*)
(*距離行列からユニークなエッジとその距離を求める*)
udEdgeTake[dmat_] := 
  Sort[Union[
    Cases[Flatten[MapIndexed[{Sort[#2], #1} &, dmat, {2}], 1], 
    {{x_, y_}, _} /; x != y]], #1[[2]] < #2[[2]] &]

(*作成中のmstにエッジを与えるとクローズドパスとなるかをテスト*)
mstCycleTest[mst_] := Module[
  {(*nEdge, nNode,*) g},
  (*nEdge = Length[mst];*)
  (*nNode = Length[Union[Flatten[Map[#[[1]] &, mst]]]];*)
  g = Map[#[[1]]&, mst];
  (*If[nEdge == nNode-1, True, False]*)
  AcyclicGraphQ[Graph[g]]
]

(*作成中のmstにオープンパスとなるエッジを与える*)
mstAddTest[mstANDpoolPos_, edgePool_, size_] := Module[
  {mst, mstNew, poolPos},
  mst = mstANDpoolPos[[1]];
  poolPos = mstANDpoolPos[[2]];
  mstNew = Join[mst, {edgePool[[poolPos + 1]]}];
  If[mstCycleTest[mstNew], {mstNew, poolPos + 1}, {mst, poolPos + 1}]
]

(*NestWhile[]用の最初の引数を作成*)
mstCreateFirst[edgePool_] := {{edgePool[[1]]}, 1}

(*エッジプールのノードの個数*)
mstEdgePoolSize[edgePool_] := Max[Flatten[Map[#[[1]] &, edgePool]]]

(*エッジのリストを引数にとるMST*)
MST[edgePool_] := Module[
  {first, size, e},
  first = mstCreateFirst[edgePool];
  size = mstEdgePoolSize[edgePool];
  NestWhile[mstAddTest[#, edgePool, size] &, first, 
  Length[#[[1]]] < size - 1 &]
]

(*距離行列を引数にとるMST*)
MSTdmat[dm_] := Module[
  {edgePool, first, size, e},
  If[Length[dm] == 1,
    {{{{}, 0}}, 0},
    edgePool = udEdgeTake[dm];
    first = mstCreateFirst[edgePool];
    size = mstEdgePoolSize[edgePool];
    NestWhile[mstAddTest[#, edgePool, size] &, first, 
    Length[#[[1]]] < size - 1 &]
  ]
]

(*整形*)
MSTreform[mst_] := Map[ Flatten[#]&, mst[[1]] ]
MSTBaseShift[mstNode_, s_] := mstNode + {s, s, 0}

(*結合距離(ステップ)行列*)
(*エッジリストから隣接行列を得る*)
adjMatFromList[l_] := Module[{max, tab},
  max = Max[Flatten[l]];
  tab = Table[0, {max}, {max}];
  Map[(tab[[#[[1]], #[[2]]]] = 1) &, l ];
  Map[(tab[[#[[2]], #[[1]]]] = 1) &, l ];
  tab
]
(*エッジリストから結合距離(ステップ)行列を得る*)
conjMatFromAdjE[l_] := Module[{tab, len, dMat, aMat, pfunc, i, pos},
  tab = adjMatFromList[l];
  len = Length[tab];
  dMat = Table[0, {len}, {len}];
  aMat = IdentityMatrix[len];
  pfunc[d_, a_] := 
    Intersection[Position[d, 0], Position[a, x_ /; x != 0]];
  For[i = 1, i <= len, i++, 
    If[Length[Position[dMat, 0]] == 0, Break[]]; aMat = aMat.tab; 
    pos = pfunc[dMat, aMat]; Map[(dMat[[#[[1]], #[[2]]]] = i) &, pos]; 
    (*Print[pos]*)
  ];
  ReplacePart[dMat, {x_, x_} -> 0]
]
