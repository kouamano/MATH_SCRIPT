(*距離行列から特定のクラスタに関する部分距離行列を抜き出す*)
subDMat[dmat_,members_]:=
  Transpose[Transpose[dmat[[members]]][[members]]]

(*部分距離行列をもとに特定のクラスタのargminを求める*)
argMinDMat[dmat_]:=Module[{sumList},
  sumList=Map[Tr[#]&,dmat];
  Position[sumList,Min[sumList]][[1]]
]

(*距離行列とクラスタリング結果から各クラスタのmedoidを求める*)
findMedoidsParCL[dmat_,clusterResult_]:=
  Map[argMinDMat[subDMat[dmat,#]]&,clusterResult]

(*各クラスタのmedoid番号からもとのサンプル番号を求める*)
orgIndexFromMedoidParCL[clusterResult_,medoids_]:=Module[{l,fmedoids},
  l=Length[medoids];
  fmedoids=Flatten[medoids];
  Table[clusterResult[[i]][[medoids[[i]]]],{i,l}]
]

(*距離行列とクラスタリング結果から各クラスタの部分距離行列を求める*)
clDmat[dmat_,cls_]:=
  Map[subDMat[dmat,#]&,cls]

(*行列から対角行列をdropする -> サイズは縮小*)
dropDiagonal[mat_]:=
  Table[Drop[mat[[n]],{n}],{n,Length[mat]}]

(*クラスタインデックス付きベクトルを各クラスタ集合に変換*)
tableToCluster[t_] := Module[{ins, uins},
  ins = Map[#[[-1]] &, t];
  uins = Union[ins];
  Map[Flatten[Position[ins, #]] &, uins]
]

(*各クラスタのMSTを得るために複数のファイルを読み込む*)
readMSTFiles[dir_, fileHead_, suffix_, numCLs_] := Module[
  {targetDir, targetFileNames},
  targetDir = 
    If[StringLength[dir] == 0, targetDir = dir, targetDir = dir <> "/"];
  targetFileNames = 
    Table[targetDir <> fileHead <> ToString[i] <> suffix, {i, numCLs}];
  Print[targetFileNames];
  Map[Import[#, "Table"] &, targetFileNames]
]

(*指標計算のための各モジュール*)
(*重心から各サンプルへの平均距離*)
averageDist[l_] := Mean[Map[EuclideanDistance[#, Mean[l]] &, l]]
(*非階層か*)
checkClDepth[cl_List] := 
  If[Length[Dimensions[Flatten[cl, 1]]] == 2, cl, None]
(*クラスタ数:N*)
numOfClusters[cl_List] := Length[cl]
(*各クラスタのメンバ数:Cn*)
numOfClusterMembers[cl_List] := Map[Length[#] &, cl]
(*全サンプル重心*)
centerOfAllClSamples[cl_List] := Mean[Flatten[cl, 1]]
(*全サンプルの重心からの平均距離*)
radiusOfAllClSamples[cl_List] := Module[
  {center},
  center = Mean[Flatten[cl, 1]];
  Mean[Map[EuclideanDistance[center, #] &, Flatten[cl, 1]]]
]
(*各クラスタの重心*)
centerOfEachClusters[cl_List] := Map[Mean[#] &, cl]
(*各クラスタの半径:rn*)
radiusOfEachClusters[cl_List] := Module[
  {numCl, eachcenter},
  numCl = Length[cl];
  eachcenter = Map[Mean[#] &, cl];
  Table[Map[EuclideanDistance[#, eachcenter[[n]]] &, cl[[n]]] // 
    Mean, {n, numCl}]
]
(*各クラスタ重心から全サンプル重心までの各距離:dn*)
distancesFromEachClToCenter[cl_List] := Module[
  {totalcenter, eachclcenter},
  totalcenter = centerOfAllClSamples[cl];
  eachclcenter = centerOfEachClusters[cl];
  Map[EuclideanDistance[totalcenter, #] &, eachclcenter]
]
(*各クラスタ重心から全サンプル重心までの平均距離:d*)
d[cl_List] := Tr[distancesFromEachClToCenter[cl]] / Length[cl]

(*Within Cluster 系*)
WCSPower[cl_] := 
  Tr[Map[Length[#]^(averageDist[#]/averageDist[Flatten[cl, 1]]) &, cl], Times]
WCSPower[memOfCls_List, radOfCls_List, meanRadTotal_] := 
  Tr[memOfCls^(radOfCls/meanRadTotal), Times]
WCSPowerWeighted[cl_] := 
  Tr[Map[Length[#]^(averageDist[#]/averageDist[Flatten[cl, 1]]) &, cl],
    Times]*Length[cl]
WCSPowerWeighted[memOfCls_List, radOfCls_List, meanRadTotal_] := 
  Length[memOfCls]*Tr[memOfCls^(radOfCls/meanRadTotal), Times]

(*指標pi*)
pi[mat_, cls_] := Module[{classes},
  classes = Map[mat[[#]] &, cls];
  WCSPowerWeighted[classes] ]
pi2[mat_, cls_] := 
  Module[{numMem, numCL, numsCLMem, totalCenter, totalRmean, classes, centers, rs},
  numMem = Length[mat];
  numCL = Length[cls];
  numsCLMem = Map[Length, cls];
  totalCenter = Mean[mat];
  totalRmean = Mean[Map[EuclideanDistance[#, totalCenter] &, mat]];
  classes = Map[mat[[#]] &, cls];
  centers = Map[Mean, classes];
  rs = Table[
     Mean[Map[EuclideanDistance[#, centers[[n]]] &, 
       classes[[n]]]], {n, numCL}]/totalRmean;
  numCL * Tr[Table[numsCLMem[[n]]^rs[[n]], {n, numCL}], Times]
]

(*各クラスタのMSTと全体のMSTを使ったpi指標の変形*)
mstPi[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmin},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmin = Min[Map[#[[-1]] &, mstm]];
  k Inner[Power, numMems, mstmaxs/MSTmmin, Times]
]
mstPiM[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmeans, MSTmmean},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmeans = Map[Mean[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmean = Mean[Map[#[[-1]] &, mstm]];
  k Inner[Power, numMems, mstmeans/MSTmmean, Times]
]
mstPin[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmin},
  (*k = Length[cls];*)
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmin = Min[Map[#[[-1]] &, mstm]];
  Inner[Power, numMems, mstmaxs/MSTmmin, Times]
]
mstPim[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmins, MSTmmin},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmins = Map[Min[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmin = Min[Map[#[[-1]] &, mstm]];
  k Inner[Power, numMems, mstmins/MSTmmin, Times]
]
mstPinm[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmins, MSTmmin},
  (*k = Length[cls];*)
  numMems = Map[Length[#] &, cls];
  mstmins = Map[Min[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmin = Min[Map[#[[-1]] &, mstm]];
  Inner[Power, numMems, mstmins/MSTmmin, Times]
]
mstPix[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmax},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmax = Max[Map[#[[-1]] &, mstm]];
  k Inner[Power, numMems, mstmaxs/MSTmmax, Times]
]
mstPinx[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmax},
  (*k = Length[cls];*)
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmax = Max[Map[#[[-1]] &, mstm]];
  Inner[Power, numMems, mstmaxs/MSTmmax, Times]
]
mstPi2[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmin},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmin = Min[Map[#[[-1]] &, mstm]];
  k^(-MSTmmin) Inner[Power, numMems, mstmaxs, Times]
]
mstPi2x[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmax},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmax = Max[Map[#[[-1]] &, mstm]];
  k^(-MSTmmax) Inner[Power, numMems, mstmaxs, Times]
]
mstPi2i[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmin},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmin = Min[Map[#[[-1]] &, mstm]];
  k^(1/MSTmmin) Inner[Power, numMems, mstmaxs, Times]
]
mstPi2iM[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmeans, MSTmmean},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmeans = Map[Mean[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmean = Mean[Map[#[[-1]] &, mstm]];
  k^(1/MSTmmean) Inner[Power, numMems, mstmeans, Times]
]
mstPi2ix[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmax},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmax = Max[Map[#[[-1]] &, mstm]];
  k^(1/MSTmmax) Inner[Power, numMems, mstmaxs, Times]
]

