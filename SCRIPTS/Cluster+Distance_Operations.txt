(* Needs: Network_operations.txt *)
(* Needs: Version_ctrl.txt *)
(*クラスターデータの基本処理*)
(*クラスタID付きのデータより、もとのベクトルデータとクラスタIDのリストに分ける*)
divideClData[data_] := Module[{len, org, ids, idsuniq, cIDs},
  len = Length[data[[1]]];
  org = Map[#[[1 ;; len - 1]] &, data];
  ids = Map[#[[-1]] &, data];
  idsuniq = Sort[Union[ids]];
  cIDs = Map[Flatten[Position[ids, #]] &, idsuniq];
  {org, cIDs} ]
(*距離行列から特定のクラスタに関する部分距離行列を抜き出す*)
subDMat[dmat_,members_]:=
  Transpose[Transpose[dmat[[members]]][[members]]]
(*部分距離行列をもとに特定のクラスタのargminを求める*)
argMinDMat[dmat_]:=Module[{sumList},
  sumList=Map[Tr[#]&,dmat];
  Position[sumList,Min[sumList]][[1]] ]
(*距離行列とクラスタリング結果から各クラスタのmedoidを求める*)
findMedoidsParCL[dmat_,clusterResult_]:=
  Map[argMinDMat[subDMat[dmat,#]]&,clusterResult]
(*各クラスタのmedoid番号からもとのサンプル番号を求める*)
orgIndexFromMedoidParCL[clusterResult_,medoids_]:=Module[{l,fmedoids},
  l=Length[medoids];
  fmedoids=Flatten[medoids];
  Table[clusterResult[[i]][[medoids[[i]]]],{i,l}] ]
(*距離行列とクラスタリング結果から各クラスタの部分距離行列を求める*)
clDmat[dmat_,cls_]:=
  Map[subDMat[dmat,#]&,cls]
(*行列から対角行列をdropする -> サイズは縮小*)
dropDiagonal[mat_]:=
  Table[Drop[mat[[n]],{n}],{n,Length[mat]}]
(*クラスタインデックス付きベクトルを各クラスタ集合に変換*)
tableToCluster[t_] := Module[{ins, uins},
  ins = Map[#[[-1]] &, t];
  uins = Union[ins];
  Map[Flatten[Position[ins, #]] &, uins] ]
(*各クラスタのMSTを得るために複数のファイルを読み込む*)
readMSTFiles[dir_, fileHead_, suffix_, numCLs_] := Module[
  {targetDir, targetFileNames},
  targetDir = 
    If[StringLength[dir] == 0, targetDir = dir, targetDir = dir <> "/"];
  targetFileNames = 
    Table[targetDir <> fileHead <> ToString[i] <> suffix, {i, numCLs}];
  Print[targetFileNames];
  Map[Import[#, "Table"] &, targetFileNames] ]

(*指標計算のための各モジュール*)
(*サンプルIDのリストと座標行列よりベクトルのクラスタを抽出*)
takeVecByID[mat_,li_]:=
  Map[mat[[#]]&,li];
(*重心から各サンプルへの平均距離*)
averageDist[l_] := Mean[Map[EuclideanDistance[#, Mean[l]] &, l]]
(*非階層か*)
checkClDepth[cl_List] := 
  If[Length[Dimensions[Flatten[cl, 1]]] == 2, cl, None]
(*クラスタ数:N*)
numOfClusters[cl_List] := Length[cl]
(*各クラスタのメンバ数:Cn*)
numOfClusterMembers[cl_List] := Map[Length[#] &, cl]
(*全サンプル重心*)
centerOfAllClSamples[cl_List] := Mean[Flatten[cl, 1]]
(*全サンプルの重心からの平均距離*)
radiusOfAllClSamples[cl_List] := Module[
  {center},
  center = Mean[Flatten[cl, 1]];
  Mean[Map[EuclideanDistance[center, #] &, Flatten[cl, 1]]]
]
(*各クラスタの重心*)
centerOfEachClusters[cl_List] := Map[Mean[#] &, cl]
(*各クラスタの半径:rn*)
radiusOfEachClusters[cl_List] := Module[
  {numCl, eachcenter},
  numCl = Length[cl];
  eachcenter = Map[Mean[#] &, cl];
  Table[Map[EuclideanDistance[#, eachcenter[[n]]] &, cl[[n]]] // 
    Mean, {n, numCl}]
]
(*各クラスタ重心から全サンプル重心までの各距離:dn*)
distancesFromEachClToCenter[cl_List] := Module[
  {totalcenter, eachclcenter},
  totalcenter = centerOfAllClSamples[cl];
  eachclcenter = centerOfEachClusters[cl];
  Map[EuclideanDistance[totalcenter, #] &, eachclcenter]
]
(*各クラスタ重心から全サンプル重心までの平均距離:d*)
d[cl_List] := Tr[distancesFromEachClToCenter[cl]] / Length[cl]

(*指標*)
(**Within Cluster 系 指標基準**)
WCSPower[cl_] := 
  Tr[Map[Length[#]^(averageDist[#]/averageDist[Flatten[cl, 1]]) &, cl], Times]
WCSPower[memOfCls_List, radOfCls_List, meanRadTotal_] := 
  Tr[memOfCls^(radOfCls/meanRadTotal), Times]
WCSPowerWeighted[cl_] := 
  Tr[Map[Length[#]^(averageDist[#]/averageDist[Flatten[cl, 1]]) &, cl],
    Times]*Length[cl]
WCSPowerWeighted[memOfCls_List, radOfCls_List, meanRadTotal_] := 
  Length[memOfCls]*Tr[memOfCls^(radOfCls/meanRadTotal), Times]

(**指標pi**)
piS[mat_, cls_] := Module[{classes},
  classes = Map[mat[[#]] &, cls];
  WCSPowerWeighted[classes] ]
piG[mat_, cls_] := 
  Module[{numMem, numCL, numsCLMem, totalCenter, totalRmean, classes, centers, rs},
  numMem = Length[mat];
  numCL = Length[cls];
  numsCLMem = Map[Length, cls];
  totalCenter = Mean[mat];
  totalRmean = Mean[Map[EuclideanDistance[#, totalCenter] &, mat]];
  classes = Map[mat[[#]] &, cls];
  centers = Map[Mean, classes];
  rs = Table[
     Mean[Map[EuclideanDistance[#, centers[[n]]] &, 
       classes[[n]]]], {n, numCL}]/totalRmean;
  numCL * (Tr[Table[numsCLMem[[n]]^rs[[n]], {n, numCL}], Times])^(1/numCL) ]

(**mstPi 系: 各クラスタのMSTと全体のMSTを使ったpi指標の変形**)
(***mstPi 派生***)
(***  mst: clusterd mst, mstm: mst from medoids, cls: clustered IDs; result of clustering ***)
mstPi[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmin},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmin = Min[Map[#[[-1]] &, mstm]];
  k Inner[Power, numMems, mstmaxs/MSTmmin, Times] ];

mstPiM[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmeans, MSTmmean},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmeans = Map[Mean[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmean = Mean[Map[#[[-1]] &, mstm]];
  k Inner[Power, numMems, mstmeans/MSTmmean, Times] ];

mstPiX[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmean},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmean = Mean[Map[#[[-1]] &, mstm]];
  k Inner[Power, numMems, mstmaxs/MSTmmean, Times] ];

mstPin[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmin},
  (*k = Length[cls];*)
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmin = Min[Map[#[[-1]] &, mstm]];
  Inner[Power, numMems, mstmaxs/MSTmmin, Times] ];

mstPim[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmins, MSTmmin},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmins = Map[Min[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmin = Min[Map[#[[-1]] &, mstm]];
  k Inner[Power, numMems, mstmins/MSTmmin, Times] ];

mstPinm[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmins, MSTmmin},
  (*k = Length[cls];*)
  numMems = Map[Length[#] &, cls];
  mstmins = Map[Min[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmin = Min[Map[#[[-1]] &, mstm]];
  Inner[Power, numMems, mstmins/MSTmmin, Times] ];

mstPix[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmax},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmax = Max[Map[#[[-1]] &, mstm]];
  k Inner[Power, numMems, mstmaxs/MSTmmax, Times] ];

mstPinx[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmax},
  (*k = Length[cls];*)
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmax = Max[Map[#[[-1]] &, mstm]];
  Inner[Power, numMems, mstmaxs/MSTmmax, Times] ];

(***mstPi2 派生***)
mstPi2[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmin},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmin = Min[Map[#[[-1]] &, mstm]];
  k^(-MSTmmin) Inner[Power, numMems, mstmaxs, Times] ];

mstPi2n[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmin},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmin = Min[Map[#[[-1]] &, mstm]];
  k^MSTmmin Inner[Power, numMems, mstmaxs, Times] ];

mstPi2x[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmax},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmax = Max[Map[#[[-1]] &, mstm]];
  k^(-MSTmmax) Inner[Power, numMems, mstmaxs, Times] ];

mstPi2rn[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmax},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmax = Max[Map[#[[-1]] &, mstm]];
  (Inner[Power, numMems, mstmaxs, Times])^(1/k) ];

(***mstPi2rk 派生***)
mstPi2rk[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmax},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmax = Max[Map[#[[-1]] &, mstm]];
  k * (Inner[Power, numMems, mstmaxs, Times])^(1/k) ];

mstPi2rkS[1][mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmax, MSTmmean},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmax = Max[Map[#[[-1]] &, mstm]];
  MSTmmean = Mean[Map[#[[-1]] &, mstm]];
  k * (Inner[Power, numMems, mstmaxs/MSTmmean, Times])^(1/k) ];

mstPi2rkS[2][mst_List, mstm_, cls_] := 
  Module[{k, numMems, mstmaxs, mstmeans, MSTmmax, mstmaxsS},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  mstmeans = Map[Mean[#] &, Map[#[[-1]] &, mst, {2}]];
  (*MSTmmax = Max[Map[#[[-1]] &, mstm]];*)
  mstmaxsS = 
    Table[Function[If[#1 == 0, 1, #1/#2]][mstmaxs[[i]], 
      mstmeans[[i]]], {i, Length[mstmaxs]}];
  (*k*(Inner[Power,numMems,mstmaxs/mstmeans,Times])^(1/k)*)
  k*(Inner[Power, numMems, mstmaxsS, Times])^(1/k) ];

mstPi2rkS[3][mst_List, mstm_, cls_, totalR_] := Module[
  {k, numMems, mstmaxs, MSTmmax},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  (*MSTmmax = Max[Map[#[[-1]] &, mstm]];*)
  k * (Inner[Power, numMems, mstmaxs/totalR, Times])^(1/k) ];

mstPi2rkS[3][mst_List, cls_, totalR_] := Module[
  {k, numMems, mstmaxs, MSTmmax},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  (*MSTmmax = Max[Map[#[[-1]] &, mstm]];*)
  k * (Inner[Power, numMems, mstmaxs/totalR, Times])^(1/k) ];

mstPi2rkS[4][mst_List, mstm_, cls_, clRs_] := Module[
(* mst: clusterd mst, mstm: medoid from exampler of classes, cls: clusterd data, clRs: Radius of clasters *)
  {k, numMems, mstmaxs, MSTmmax, mstmaxsS},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  (*MSTmmax = Max[Map[#[[-1]] &, mstm]];*)
  mstmaxsS = 
    Table[Function[If[#2 == 0, 0, #1/#2]][mstmaxs[[i]], 
      clRs[[i]]], {i, Length[mstmaxs]}];
  (*k * (Inner[Power, numMems, mstmaxs/clRs, Times])^(1/k)*)
  k * (Inner[Power, numMems, mstmaxsS, Times])^(1/k) ];

mstPi2rkS[4][mst_List, cls_, clRs_] := Module[ 
  {k, numMems, mstmaxs, MSTmmax},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  mstmaxsS = 
    Table[Function[If[#2 == 0, 0, #1/#2]][mstmaxs[[i]], 
      clRs[[i]]], {i, Length[mstmaxs]}];
  (*k * (Inner[Power, numMems, mstmaxs/clRs, Times])^(1/k)*)
  k * (Inner[Power, numMems, mstmaxsS, Times])^(1/k) ];

mstPi2rkS[5][mst_List, mstm_, cls_, maxMSTt_] := Module[
  {k, numMems, mstmaxs, MSTmmax},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  k * (Inner[Power, numMems, mstmaxs/maxMSTt, Times])^(1/k) ];

mstPi2rkS[5][mst_List, cls_, maxMSTt_] := Module[
  {k, numMems, mstmaxs, MSTmmax},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  k * (Inner[Power, numMems, mstmaxs/maxMSTt, Times])^(1/k) ];

mstPi2rkS[5][mst_List, maxMSTt_] := 
 (* mst: clusterd mst data, maxMSTt: a cluster diameter *)
 Module[{k, clIDs, numMems, mstmaxs, MSTmmax},
  k = Length[mst];
  clIDs = Map[{#[[1]], #[[2]]} &, mst, {2}];
  clIDs = Map[Union[Flatten[#]] &, clIDs];
  numMems = Map[Length, clIDs];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  k*(Inner[Power, numMems, mstmaxs/maxMSTt, Times])^(1/k) ];

(***mstPi2i 派生***)
mstPi2i[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmin},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmin = Min[Map[#[[-1]] &, mstm]];
  k^(1/MSTmmin) Inner[Power, numMems, mstmaxs, Times] ]

mstPi2iM[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmeans, MSTmmean},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmeans = Map[Mean[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmean = Mean[Map[#[[-1]] &, mstm]];
  k^(1/MSTmmean) Inner[Power, numMems, mstmeans, Times] ]

mstPi2ix[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmax},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmax = Max[Map[#[[-1]] &, mstm]];
  k^(1/MSTmmax) Inner[Power, numMems, mstmaxs, Times] ]

mstPi2im[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmean},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmean = Mean[Map[#[[-1]] &, mstm]];
  k^(1/MSTmmean) Inner[Power, numMems, mstmaxs, Times] ]

mstPi2ir[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmax},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmax = Max[Map[#[[-1]] &, mstm]];
  k^(1/MSTmmax) * (Inner[Power, numMems, mstmaxs, Times])^(1/k) ]

mstPi2r[mst_List, mstm_, cls_] := Module[
  {k, numMems, mstmaxs, MSTmmax},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmax = Max[Map[#[[-1]] &, mstm]];
  k^(-MSTmmax) * (Inner[Power, numMems, mstmaxs, Times])^(1/k) ]

(***Kの調整***)
mstPi2iN[mst_List, mstm_, cls_] := Module[
  {k, n, numMems, mstmaxs, MSTmmin},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  n = Tr[Flatten[numMems]];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmin = Min[Map[#[[-1]] &, mstm]];
  (k/n)^MSTmmin Inner[Power, numMems, mstmaxs, Times]
]
mstPi2iI[mst_List, mstm_, cls_] := Module[
  {k, n, numMems, mstmaxs, MSTmmin},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  n = Tr[Flatten[numMems]];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmin = Min[Map[#[[-1]] &, mstm]];
  ((1/n)^(1/k))^(1/MSTmmin) Inner[Power, numMems, mstmaxs, Times]
]
mstPi2I[mst_List, mstm_, cls_] := Module[
  {k, n, numMems, mstmaxs, MSTmmin},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  n = Tr[Flatten[numMems]];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmin = Min[Map[#[[-1]] &, mstm]];
  ((1/n)^(1/k))^(-MSTmmin) Inner[Power, numMems, mstmaxs, Times]
]
mstPi2iS[1][mst_List, mstm_, cls_] := 
  Module[{k, numMems, mstmaxs, mstmeans, MSTmmin, MSTmmean, MSTmminS, 
    mstmaxsS}, k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  mstmeans = Map[Mean[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmin = Min[Map[#[[-1]] &, mstm]];
  MSTmmean = Mean[Map[#[[-1]] &, mstm]];
  MSTmminS = If[MSTmmin == 0, 0, MSTmmean/MSTmmin];
  (*Print[mstmaxs];*)
  mstmaxsS = 
    Table[Function[If[#1 == 0, 0, #1/#2]][mstmaxs[[i]], 
      mstmeans[[i]]], {i, Length[mstmaxs]}];
  (*k^(MSTmmean/MSTmmin) Inner[Power,numMems,mstmaxs/mstmeans,Times]*)
  k^(MSTmminS) Inner[Power, numMems, mstmaxsS, Times]
]
mstPi2iS[2][mst_List, mstm_, cls_, totalR_] := Module[
  {k, numMems, mstmaxs, MSTmmin},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmin = Min[Map[#[[-1]] &, mstm]];
  k^(totalR/MSTmmin) Inner[Power, numMems, mstmaxs/totalR, Times]
]
mstPi2iS[3][mst_List, mstm_, cls_, totalR_, clRs_] := 
  Module[{k, numMems, mstmaxs, MSTmmin, MSTmminS, mstmaxsS},
  k = Length[cls];
  numMems = Map[Length[#] &, cls];
  mstmaxs = Map[Max[#] &, Map[#[[-1]] &, mst, {2}]];
  MSTmmin = Min[Map[#[[-1]] &, mstm]];
  MSTmminS = If[MSTmmin == 0, 0, totalR/MSTmmin];
  mstmaxsS = 
    Table[Function[If[#1 == 0, 0, #1/#2]][mstmaxs[[i]], clRs[[i]]], {i,
      Length[mstmaxs]}];
  (*k^(totalR/MSTmmin) Inner[Power,numMems,mstmaxs/clRs,Times]*)
  k^(MSTmminS) Inner[Power, numMems, mstmaxsS, Times]
]

(***maxminPi 系***)
Maxmin[m_] := Min[Map[Max[#] &, m]]
Minmax[m_] := Max[Map[Min[#] &, m]]
maxminPi[dmat_, medcls_, cls_] := 
  Module[{k, numMems, submaxmins, medmaxmin}, k = Length[cls];
   numMems = Map[Length[#] &, cls];
   medmaxmin = Maxmin[subDMat[dmat, medcls]];
   submaxmins = Map[Maxmin[subDMat[dmat, #]] &, cls];
   k Inner[Power, numMems, submaxmins/medmaxmin, Times] ]

maxminPi2[dmat_, medcls_, cls_] := 
  Module[{k, numMems, submaxmins, medmaxmin}, k = Length[cls];
   numMems = Map[Length[#] &, cls];
   medmaxmin = Maxmin[subDMat[dmat, medcls]];
   submaxmins = Map[Maxmin[subDMat[dmat, #]] &, cls];
   k^(-medmaxmin) Inner[Power, numMems, submaxmins, Times] ]

maxminPi2i[dmat_, medcls_, cls_] := 
  Module[{k, numMems, submaxmins, medmaxmin}, k = Length[cls];
   numMems = Map[Length[#] &, cls];
   medmaxmin = Maxmin[subDMat[dmat, medcls]];
   submaxmins = Map[Maxmin[subDMat[dmat, #]] &, cls];
   k^(1/medmaxmin) Inner[Power, numMems, submaxmins, Times] ]

maxminPim[dmat_, medcls_, cls_] := 
  Module[{k, numMems, submaxmins, medminmin}, k = Length[cls];
   numMems = Map[Length[#] &, cls];
   medminmin = Min[dropDiagonal[subDMat[dmat, medcls]]];
   submaxmins = Map[Maxmin[subDMat[dmat, #]] &, cls];
   k Inner[Power, numMems, submaxmins/medminmin, Times] ]

maxminPim2[dmat_, medcls_, cls_] := 
  Module[{k, numMems, submaxmins, medminmin}, k = Length[cls];
   numMems = Map[Length[#] &, cls];
   medminmin = Min[dropDiagonal[subDMat[dmat, medcls]]];
   submaxmins = Map[Maxmin[subDMat[dmat, #]] &, cls];
   k^(-medminmin) Inner[Power, numMems, submaxmins, Times] ]

maxminPim2i[dmat_, medcls_, cls_] := 
  Module[{k, numMems, submaxmins, medminmin}, k = Length[cls];
   numMems = Map[Length[#] &, cls];
   medminmin = Min[dropDiagonal[subDMat[dmat, medcls]]];
   submaxmins = Map[Maxmin[subDMat[dmat, #]] &, cls];
   k^(1/medminmin) Inner[Power, numMems, submaxmins, Times] ]

(*Brute-force classify*)
(**Kruskal Method**)
kruskalFirstGr[li_] := Table[n, {n, Length[li]}]

findFirstMinPos[dmat_] := Position[dmat, Min[dmat], 2][[1]]

firstKruskalDmat[dmat_] := 
  ReplacePart[dmat, {x_, y_} /; y <= x -> Infinity]

dmatRewrite[dmat_, pos_] := ReplacePart[dmat, pos -> Infinity]

classRewrite[classList_, pos_] := Module[{targetPos, minId, reprls},
  targetPos = 
   Flatten[{Position[classList, classList[[pos[[1]]]]], 
     Position[classList, classList[[pos[[2]]]]]}];
  minId = Min[{classList[[pos[[1]]]], classList[[pos[[2]]]]}];
  reprls = Map[# -> minId &, targetPos];
  ReplacePart[classList, reprls]
  ]

nextKruskal[{dmat_, classList_}] := 
 Module[{outdmat, outClassList, minpos},
  minpos = findFirstMinPos[dmat];
  outdmat = dmatRewrite[dmat, minpos];
  outClassList = classRewrite[classList, minpos];
  {outdmat, outClassList}
  ]

nextKruskalEdge[{dmat_, classList_, mstEdge_}] := 
  Module[{outdmat, outClassList, minpos, outMSTEdge},
    minpos = findFirstMinPos[dmat];
    outdmat = dmatRewrite[dmat, minpos];
    outClassList = classRewrite[classList, minpos];
    If[classList[[minpos[[1]]]] != classList[[minpos[[2]]]], 
      outMSTEdge = Append[mstEdge, minpos], outMSTEdge = mstEdge];
    {outdmat, outClassList, outMSTEdge}
  ]

kruskalBuild[data_] := Module[{len, dmat, dmat1, li1},
  len = Length[data];
  dmat = Outer[EuclideanDistance, data, data, 1];
  dmat1 = firstKruskalDmat[dmat];
  li1 = kruskalFirstGr[data];
  NestList[nextKruskal, {dmat1, li1}, (len*len - len)/2]
  ]

kruskalBuild[data_, n_] := Module[{len, dmat, dmat1, li1},
  len = Length[data];
  dmat = Outer[EuclideanDistance, data, data, 1];
  dmat1 = firstKruskalDmat[dmat];
  li1 = kruskalFirstGr[data];
  NestList[nextKruskal, {dmat1, li1}, n]
  ]

kruskalEdgeBuild[data_] := Module[{len, dmat, dmat1, li1},
  len = Length[data];
  dmat = Outer[EuclideanDistance, data, data, 1];
  dmat1 = firstKruskalDmat[dmat];
  li1 = kruskalFirstGr[data];
  NestList[nextKruskalEdge, {dmat1, li1, {}}, (len*len - len)/2]
  ]

kruskalEdgeWhileBuild[data_] := Module[{len, dmat, dmat1, li1},
  len = Length[data];
  dmat = Outer[EuclideanDistance, data, data, 1];
  dmat1 = firstKruskalDmat[dmat];
  li1 = kruskalFirstGr[data];
  NestWhileList[nextKruskalEdge, {dmat1, li1, {}}, 
   Length[Union[#[[2]]]] >= 2 & ]
  ]

kruskalEdgeBuild[data_, n_] := Module[{len, dmat, dmat1, li1},
  len = Length[data];
  dmat = Outer[EuclideanDistance, data, data, 1];
  dmat1 = firstKruskalDmat[dmat];
  li1 = kruskalFirstGr[data];
  NestList[nextKruskalEdge, {dmat1, li1, {}}, n]
  ]

createMST[dmat_, edgeList_] := 
  Map[Flatten[{#, dmat[[#[[1]], #[[2]]]]}] &, edgeList]

(**Cluster Build**)
makeClusterByGr[li_] := Module[{classes},
  classes = Union[li];
  Map[Flatten[Position[li, #]] &, classes]
  ]

extractEdgeGrFromCl[mst_, cl_ /; Length[cl] <= 1] := {}
extractEdgeGrFromCl[mst_, cl_ /; Length[cl] == 2] := Module[{mstEd},
  mstEd = Map[Sort[{#[[1]], #[[2]]}] &, mst];
  mst[[Flatten[Position[mstEd, Sort[cl]]]]] ]
extractEdgeGrFromCl[mst_, cl_ /; Length[cl] >= 3] := 
 Module[{mstEd, startEd, endEd, startContPos, endContPos},
  mstEd = Map[Sort[{#[[1]], #[[2]]}] &, mst];
  startEd = Map[#[[1]] &, mst];
  endEd = Map[#[[2]] &, mst];
  startContPos = 
   Position[Map[ContainsAny[cl, {#}] &, startEd], True];
  endContPos = Position[Map[ContainsAny[cl, {#}] &, endEd], True];
  mst[[Flatten[Intersection[startContPos, endContPos]]]] ]

makeEdgeGrFromCluster[mst_, cl_] := 
 Map[extractEdgeGrFromCl[mst, #] &, cl]

