dataflatten[list_]:=
 Module[{clength, rlength, csum, rsum},
  clength = Length[list];
  rlength = Length[list[[1]]];
  csum = Apply[Plus, list];
  rsum = Apply[Plus, Transpose[list]];
  Transpose[Transpose[list/rsum]/csum]
 ];

dataflatten[list_,n_] :=
 Module[{clength, rlength, csum, rsum},
  clength = Length[list];
  rlength = Length[list[[1]]];
  csum = Apply[Plus, list];
  rsum = Apply[Plus, Transpose[list]];
  Transpose[Transpose[list/rsum^n]/csum^n]
 ];

diagonalmatrix[k_,l_,n_]:=
 Module[{t, d},
  t = Table[k, {n}, {n}];
  d = Table[
   ReplacePart[t[[m]], l, m], {m, n}
  ]
 ];

intertest[a_,intb_,intc_]:=
 If[a >= intb,
  If[a < intc, a, nil], nil
 ];

interdistrib[data_, min_, max_, step_] :=
 Module[{segs},
  segs = Ceiling[(max - min)/step];
  Table[
   intertest[data[[k]], min + (step l), min + (step (l + 1))],
   {l, 0, segs - 1}, {k, data // Length}
  ]
 ];

numdistrib[distrib_]:=
 Table[
  Length[Complement[distrib[[n]], {nil}]],
  {n, Length[distrib]}
 ];

(*Cluster affinity*)
intersectionNum[x___] := Length[Intersection[x]];

unionNum[x___] := Length[Union[x]];

clusterInner[cl1_List, cl2_List] := 
 Tr[Flatten[((Outer[intersectionNum, cl1, cl2, 1] // N)/
      Outer[unionNum, cl1, cl2, 1])]];

clusterInnerSq[cl1_List, cl2_List] := 
 Tr[Flatten[((Outer[intersectionNum, cl1, cl2, 1] // N)/
      Outer[unionNum, cl1, cl2, 1])^2]];

clusterAffinity[cl1_List, cl2_List] := 
 clusterInner[cl1, cl2]^2/Length[cl1]/Length[cl2];

clusterAffinitySq[cl1_List, cl2_List] := 
 clusterInnerSq[cl1, cl2]^2/Length[cl1]/Length[cl2];

(*Cluster sim: non-exclusive*)
getNumElem[listoflist__] := Length[Flatten[{listoflist}]];

getWeight[listoflist__] := 1/Counts[Flatten[{listoflist}]];

getSearchSpace[{lista_, listb_}] := getNumElem[lista]*getNumElem[listb];

getSearchLen[{lista_, listb_}] := getNumElem[lista] + getNumElem[listb];

matchSyms[{lista_, listb_}] := 
 Map[#[[1]] &, Cases[Outer[List, lista, listb, 1], {x_, x_}, {2}]];

makeAllPairFromClusterPair[cl1_, cl2_] := 
 Flatten[Outer[List, cl1, cl2, 1], 1];

weghtedPairMatch[{lista_, listb_}] := Module[{len, sp},
  len = getSearchLen[{lista, listb}];
  sp = getSearchSpace[{lista, listb}];
  Tr[matchSyms[{lista, listb}] /. getWeight[{lista, listb}]]*len/sp
  ];

clusterPairSim[cl1_, cl2_] := 
 Module[{pairofpair, pairself1, pairself2, pairmatch, selfmatch1, selfmatch2},
  pairofpair = makeAllPairFromClusterPair[cl1, cl2];
  pairself1 = makeAllPairFromClusterPair[cl1, cl1];
  pairself2 = makeAllPairFromClusterPair[cl2, cl2];
  pairmatch = Tr[Map[weghtedPairMatch, pairofpair]];
  selfmatch1 = Tr[Map[weghtedPairMatch, pairself1]];
  selfmatch2 = Tr[Map[weghtedPairMatch, pairself2]];
  pairmatch^2/(selfmatch1 selfmatch2)
  ];

numberNumbering[{sym_, count_}] := Table[sym[i], {i, count}];

seqComplement[list1_, list2_] := Module[
  {tally1, tally2, seqnum1, seqnum2},
  tally1 = Tally[list1];
  tally2 = Tally[list2];
  seqnum1 = Map[numberNumbering, tally1] // Flatten;
  seqnum2 = Map[numberNumbering, tally2] // Flatten;
  Map[#[[0]] &, Complement[seqnum1, seqnum2]]
  ];
