


subMat[mat_, lw_, up_] := Transpose[Transpose[mat[[lw ;; up]]][[lw ;; up]]];
subMat[mat_, sel_List] := Transpose[Transpose[mat[[sel]]][[sel]]];
subMat[mat_, selL_List, selC_List] := Transpose[Transpose[mat[[selL]]][[selC]]];

eigenIntensity[mat_] := Eigensystem[mat][[1]]*Eigensystem[mat][[2]];

toSymmetric[mat_] :=
  Module[{cols, rows},
  cols = Length[mat[[1]]];
  rows = Length[mat];
  Map[Tr[#] &, 
    Table[
    mat[[k]][[m]]*mat[[l]][[m]], {k, rows}, {l, rows}, {m, cols}], {2} ] ];

matReOrder[mat_, odr_] := Map[#[[odr]] &, mat[[odr]]];
mapReOrder[mat_, odr_] := Map[#[[odr]] &, mat];
matRowReOrder[mat_, odr_] := mat[[odr]];
matColReOrder[mat_, odr_] := Map[#[[odr]] &, mat];

linkTotal[mat_] := Map[Total, mat];

mapNorm[mat_] := Map[Norm, mat];

matReverse[mat_] := Map[Reverse, mat];

diagonalTotal[mat_] := Module[{dlen},
  dlen = Length[mat];
  Table[Diagonal[mat, i] // Total, {i, 1 - dlen, dlen - 1}] ];

revDiagonalTotal[mat_] := Module[{matrev, dlen},
  dlen = Length[mat];
  matrev = matReverse[mat];
  Table[Diagonal[matrev, i] // Total, {i, dlen - 1, 1 - dlen, -1}] ];

paddingDioagonalTotal[mat_] := Module[{mate, dlen},
  dlen = Length[mat];
  mate = Flatten[{mat, mat}, 1];
  Table[Diagonal[mate, i] // Total, {i, -dlen, -1}] ];

paddingRevDioagonalTotal[mat_] := Module[{matrev, mate, dlen},
  dlen = Length[mat];
  matrev = matReverse[mat];
  mate = Flatten[{matrev, matrev}, 1];
  Table[Diagonal[mate, i] // Total, {i, -1, -dlen, -1}] ];

createRandomSymMat[size_] := Module[
  {pre, out},
  pre = Table[RandomReal[], {size}, {size}];
  Table[pre[[j]][[i]] = pre[[i]][[j]], {i, size}, {j, i}];
  pre
  ];
createRandomSymIntMat[size_] := Module[
  {pre, out},
  pre = Table[RandomInteger[{1,size}], {size}, {size}];
  Table[pre[[j]][[i]] = pre[[i]][[j]], {i, size}, {j, i}];
  pre
  ];

createRandomSymMat[size_, tr_] := Module[
  {pre, out},
  pre = Table[RandomReal[], {size}, {size}];
  Table[pre[[j]][[i]] = pre[[i]][[j]], {i, size}, {j, i}];
  Table[pre[[i]][[i]] = 0, {i, size}];
  pre
  ];

zeroTr[m_] := Module[{out},
  out = m;
  For[i = 1, i <= Length[out], i++, out[[i, i]] = 0];
  out
  ];

zeroInsert[m_, s_, z_] := Module[
  {zerolist1, zerolist2, inspos, out},
  zerolist1 = Table[0, {Length[m]}];
  zerolist2 = Table[0, {Length[m] + z}];
  inspos = Table[{s}, {z}];
  out = Insert[m, zerolist1, inspos];
  Insert[Transpose[out], zerolist2, inspos]
  ];

zeroInsertRow[m_, s_, z_] := Module[
  {zerolist, inspos},
  zerolist = Table[0, {Length[m]}];
  inspos = Table[{s}, {z}];
  Insert[m, zerolist, inspos]
  ];

zeroInsertCol[m_, s_, z_] := Module[
  {zerolist, inspos},
  zerolist = Table[0, {Length[m]}];
  inspos = Table[{s}, {z}];
  Transpose[Insert[Transpose[m], zerolist, inspos]]
  ];

(*trRep[m_, t_] := Module[
  {lm, lt, rep, out},
  lm = Length[m];
  lt = Length[t];
  If[lm <= lt, rep = t[[1 ;; lm]], rep = Join[t, Table[0, {lm - lt}]]];
  ReplacePart[m, Table[{i, i} -> rep[[i]], {i, lm}]]
  ];*)

trRep[mat_, li_] := Module[{rls},
  rls = Table[{n, n} -> li[[n]], {n, Length[li]}];
  ReplacePart[mat, rls]
  ];

