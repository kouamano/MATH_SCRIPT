Needs["Combinatorica`"]

(*basic program*)
subDMat[dmat_, members_] := 
 Transpose[Transpose[dmat[[members]]][[members]]]
argMinDMat[dmat_] := Module[{sumList},
  sumList = Map[Tr[#] &, dmat];
  Position[sumList, Min[sumList]][[1]]
]
findMedoidsParCL[dmat_, clusterResult_] := 
  Map[argMinDMat[subDMat[dmat, #]] &, clusterResult]
orgIndexFromMedoidParCL[clusterResult_, medoids_] := Module[
  {l, fmedoids},
  l = Length[medoids];
  fmedoids = Flatten[medoids];
  Table[clusterResult[[i]][[medoids[[i]]]], {i, l}]
]
dropDiagonal[mat_] := Table[Drop[mat[[n]], {n}], {n, Length[mat]}]

(*cDB*)
connectiveClass`s[dshortMatZeroself_, clMembers_, medoidIndex_] := 
  Tr[dshortMatZeroself[[medoidIndex, clMembers]]]/Length[clMembers]
connectiveClass`r[edMat_, dshortMatZeroself_, cls_, medoids_, i_] := 
  Module[{js},
    js = Drop[Range[Length[cls]], {i}];
    Max[ Map[(connectiveClass`s[dshortMatZeroself, cls[[i]], 
      medoids[[i]]] + 
      connectiveClass`s[dshortMatZeroself, cls[[#]], medoids[[#]]])/
      edMat[[i, #]] &, js]  
    ]
  ]
cDB[edMat_, dshortMatZeroself_, cls_] := Module[{sampleMedoids},
  sampleMedoids = (orgIndexFromMedoidParCL[cls, 
    findMedoidsParCL[edMat, cls]] // Flatten);
  Tr[Table[
    connectiveClass`r[edMat, dshortMatZeroself, cls, sampleMedoids, 
    i], {i, Length[cls]}]]
]

(*cDunn*)
connectiveClass`d[cl1_, cl2_, dshortMatZeroself_] := Module[
  {outer},
  outer = Flatten[Outer[List, cl1, cl2, 1], 1];
  Min[Map[dshortMatZeroself[[#[[1]], #[[2]]]] &, outer]]
]
connectiveClass`delta[cl_, dshortMatZeroself_] := Module[
  {subset},
  subset = Subsets[cl, {2}];
  If[Length[subset] == 0, 0, 
    Max[Map[dshortMatZeroself[[#[[1]], #[[2]]]] &, subset]]]
]
cDunn[dshortMatZeroself_, cls_] := Module[
  {numCls, maxdelta, subset},
  numCls = Length[cls];
  maxdelta = 
    Max[Map[connectiveClass`delta[#, dshortMatZeroself] &, cls]];
  subset = Subsets[cls, {2}];
  Min[Map[connectiveClass`d[#[[1]], #[[2]], dshortMatZeroself] &, 
    subset]]/maxdelta
]

(*cGDunn*)
Gdelta[cls_, medoid_, dshortMatZeroself_] :=
 2 Tr[dshortMatZeroself[[medoid]][[cls]]]/Length[cls]
Gd[clS_, clT_, dshortMatZeroself_] := Module[
  {coords},
  coords = Flatten[Outer[List, clS, clT, 1], 1];
  Tr[Flatten[Map[dshortMatZeroself[[#]] &, coords]]]/ Length[clS] / 
    Length[clT]
]
cGDunn[cls_, dshortMatZeroself_] := Module[
  {numCLs, medoidIDs, maxGdelta, subset},
  numCLs = Length[cls];
  medoidIDs = 
    Flatten[orgIndexFromMedoidParCL[cls, 
    findMedoidsParCL[dshortMatZeroself, cls]]];
  maxGdelta = 
    Max[Table[
      Gdelta[cls[[n]], medoidIDs[[n]], dshortMatZeroself], {n, 
      numCLs}]];
  subset = Subsets[cls, {2}];
  Min[Map[Gd[#[[1]], #[[2]], dshortMatZeroself] &, subset]]/maxGdelta
]

(*cPS*)
connectiveClass`dMin[dshortMatZeroself_, cls_] := Module[
  {medoids, subdmat},
  medoids = 
    Flatten[orgIndexFromMedoidParCL[cls, 
      findMedoidsParCL[dshortMatZeroself, cls]]];
  subdmat = subDMat[dshortMatZeroself, medoids];
  Min[dropDiagonal[subdmat]]
]
cPS[dshortMatZeroself_, cls_] := Module[
  {medoidsOfCl, subdmats, dmin, numOfMems, size},
  medoidsOfCl = Flatten[findMedoidsParCL[dshortMatZeroself, cls]];
  subdmats = Map[subDMat[dshortMatZeroself, #] &, cls];
  dmin = connectiveClass`dMin[dshortMatZeroself, cls];
  numOfMems = Map[Length[#] &, cls];
  size = Length[cls];
  Tr[Table[
    Tr[subdmats[[n]][[medoidsOfCl[[n]]]]], {n, 
      Length[medoidsOfCl]}]/dmin/numOfMems]/size
]

(*cI*)
cI[dshortMatZeroself_, cls_] := Module[
  {size, eK, dK, subdmats, medoidsOfCl, sampleIDsOfmedoids, medDmat},
  size = Length[cls];
  subdmats = Map[subDMat[dshortMatZeroself, #] &, cls];
  medoidsOfCl = Flatten[findMedoidsParCL[dshortMatZeroself, cls]];
  eK = Tr[
    Table[Tr[subdmats[[n]][[medoidsOfCl[[n]]]]], {n, 
      Length[medoidsOfCl]}]];
  sampleIDsOfmedoids = orgIndexFromMedoidParCL[cls, medoidsOfCl];
  medDmat = subDMat[dshortMatZeroself, sampleIDsOfmedoids];
  dK = Max[medDmat];
  (1/size) (1/eK) dK
]

(*cXB*)
cXB[dshortMatZeroself_, cls_] := Module[
  {size, numWholeSamples, subdmats, medoidsOfCl, medDmat, 
    sampleIDsOfmedoids, numerator, denominator},
  size = Length[cls];
  numWholeSamples = Length[dshortMatZeroself];
  subdmats = Map[subDMat[dshortMatZeroself, #] &, cls];
  medoidsOfCl = Flatten[findMedoidsParCL[dshortMatZeroself, cls]];
  numerator = 
    Tr[Flatten[Table[subdmats[[n]][[medoidsOfCl[[n]]]], {n, size}]]];
  sampleIDsOfmedoids = orgIndexFromMedoidParCL[cls, medoidsOfCl];
  medDmat = subDMat[dshortMatZeroself, sampleIDsOfmedoids];
  denominator = (Min[dropDiagonal[medDmat]] size);
  numerator/denominator
]

(*cSV*)
cSV[dshortMatZeroself_, cls_] := Module[
  {size, numsClMems, subdmats, medoidsOfCl, vu, sampleIDsOfmedoids, 
    meddmat, dmin},
  size = Length[cls];
  numsClMems = Map[Length[#] &, cls];
  subdmats = Map[subDMat[dshortMatZeroself, #] &, cls];
  medoidsOfCl = Flatten[findMedoidsParCL[dshortMatZeroself, cls]];
  vu = (Tr[
    Table[Tr[subdmats[[n]][[medoidsOfCl[[n]]]]/numsClMems[[n]]], {n,
      size}]]/size);
  sampleIDsOfmedoids = orgIndexFromMedoidParCL[cls, medoidsOfCl];
  meddmat = subDMat[dshortMatZeroself, sampleIDsOfmedoids];
  dmin = Min[dropDiagonal[meddmat]];
  vu + dmin
]
